@inject HttpClient _client

<EditForm Model="@evt" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Event Name: </label>
            <div>
                <InputText @bind-Value="@evt.eventName" class="form-control" />
                <ValidationMessage For="@(() => evt.eventName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Date of Event: </label>
            <div>
                <InputDate @bind-Value="@evt.eventDateTime" class="form-control" />
                <ValidationMessage For="@(() => evt.eventDateTime)" />
            </div>
        </div>
        <div class="form-group">
            <label>Event Location: </label>
            <div>
                <InputText @bind-Value="@evt.eventLocation" class="form-control" />
                <ValidationMessage For="@(() => evt.eventLocation)" />
            </div>
        </div>
        <div class="form-group">
            <label>Event Organiser: </label>
            <div>
                <InputSelect @bind-Value="evt.OrganiserId" class="form-control" >
                    <option value="">-- Select Organiser --</option>
                    @if (Organisers != null)
                    {
                        foreach (var organiser in Organisers)
                        {
                            <option value="@organiser.Id">@organiser.organiserName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => evt.OrganiserId)" />
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <BackToList Target="events" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Event? evt { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Organiser>? Organisers;

    protected async override Task OnInitializedAsync()
    {
        Organisers = await _client.GetFromJsonAsync<List<Organiser>>($"{Endpoints.OrganisersEndpoint}");
    }
}
